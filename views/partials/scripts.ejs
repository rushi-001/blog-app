<script src="https://cdn.tailwindcss.com"></script>
<script>
    tailwind.config = {
        theme: {
            extend: {
                colors: {
                    clifford: "#da373d",
                },
            },
        },
    };
</script>
<style type="text/tailwindcss">
    @layer utilities {
        .content-auto {
            content-visibility: auto;
        }
    }
</style>

<!-- for toggling Navbar option button -->
<script>
    function toggleMenu() {
        const menu = document.getElementById("menu");
        menu.classList.toggle("hidden");
        menu.classList.toggle("block");
        const button = document.getElementById("menu-button");
        button.setAttribute(
            "aria-expanded",
            !menu.classList.contains("hidden")
        );
    }
</script>

<!-- for editer TinyMCE -->
<script src="/tinymce/tinymce.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.6/clipboard.min.js"></script>

<script>
    tinymce.init({
        selector: "textarea#my-expressjs-tinymce-app",
        menubar: false,
        autosave_ask_before_unload: false,
        powerpaste_allow_local_images: true,
        plugins:
            "print preview powerpaste casechange importcss tinydrive searchreplace autolink autosave save directionality advcode visualblocks visualchars fullscreen image link media mediaembed template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists checklist wordcount tinymcespellchecker a11ychecker imagetools textpattern noneditable help formatpainter permanentpen pageembed charmap tinycomments mentions quickbars linkchecker emoticons advtable export",
        toolbar:
            "undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media pageembed template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment",
        spellchecker_dialog: true,
        spellchecker_ignore_list: ["Ephox", "Moxiecode"],
        tinydrive_demo_files_url: "../_images/tiny-drive-demo/demo_files.json",
        tinydrive_token_provider: (success, failure) => {
            success({
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huZG9lIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Ks_BdfH4CWilyzLNk8S2gDARFhuxIauLa8PwhdEQhEo",
            });
        },
        quickbars_selection_toolbar:
            "bold italic | quicklink h2 h3 blockquote quickimage quicktable",
        content_style:
            "body { font-family:Helvetica,Arial,sans-serif; font-size:16px }",
        image_caption: true,
        noneditable_noneditable_class: "mceNonEditable",
        toolbar_mode: "sliding",
        spellchecker_ignore_list: ["Ephox", "Moxiecode"],
        tinycomments_mode: "embedded",
        content_style: ".mymention{ color: gray; }",
        contextmenu: "link image imagetools table configurepermanentpen",
    });
</script>

<!-- for copying code block -->
<script>
    document.addEventListener("DOMContentLoaded", (event) => {
        document.querySelectorAll("pre").forEach((codeBlock) => {
            // Wrap the code block in a relative div
            const wrapperDiv = document.createElement("div");
            wrapperDiv.className = "relative";

            // Insert the wrapper before the code block
            codeBlock.parentNode.insertBefore(wrapperDiv, codeBlock);

            // Move the code block inside the wrapper
            wrapperDiv.appendChild(codeBlock);

            // Create the copy button
            const copyButton = document.createElement("button");
            copyButton.innerText = "Copy";
            copyButton.className =
                "absolute top-2 right-2 bg-gray-800 text-white border border-gray-600 px-3 py-1 rounded cursor-pointer";

            // Append the button to the wrapper
            wrapperDiv.appendChild(copyButton);

            // Add copy functionality
            copyButton.addEventListener("click", () => {
                const tempTextarea = document.createElement("textarea");
                tempTextarea.value = codeBlock.innerText;
                document.body.appendChild(tempTextarea);
                tempTextarea.select();
                document.execCommand("copy");
                document.body.removeChild(tempTextarea);

                // Notify the user
                copyButton.innerText = "Copied!";
                setTimeout(() => {
                    copyButton.innerText = "Copy";
                }, 2000);
            });
        });
    });
</script>

<!-- for Tailwind -->

<script src="https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio,line-clamp,container-queries"></script>
